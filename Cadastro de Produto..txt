Cadastro de Produto.

public void atualizarTabelaEstoque(){
        try {
            Connection coin = conexaoBancoDeDados.conexaoBanco();
             String sql ="SELECT p.id_produto AS Codigo \n" +
",p.denominacao AS Produto ,\n" +
"p.quantidade_estoque AS QuantidadenoEstoque ,\n" +
"p.preco AS  PreÃ§o ,\n" +
"p.situacao AS SituacaoProduto,\n" +
"d.descricao AS DescriÃ§Ã£o,\n" +
"d.cor AS Cor,\n" +
"d.tecido AS Tecido,\n" +
"d.tamanho AS tamanho,\n" +
"d.categoria AS Categoria, \n" +
"d.imagem_url AS URL\n" +
"FROM produto p \n" +
"INNER JOIN descricao d ON d.id_descricao = p.id_descricao;";
             PreparedStatement stmt = coin.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery();
             
            DefaultTableModel tabelaestoquecritico = (DefaultTableModel) this.tabelaEstoque.getModel();
            tabelaestoquecritico.setNumRows(0);
             while(rs.next()){
                 Object[] array ={rs.getString("Codigo"),rs.getString("Produto"),rs.getString("QuantidadenoEstoque"),rs.getString("PreÃ§o"),rs.getString("SituacaoProduto"),rs.getString("DescriÃ§Ã£o"),rs.getString("Cor"),rs.getString("Tecido"),rs.getString("Tamanho"),rs.getString("Categoria"),rs.getString("URL")};
                 tabelaestoquecritico.addRow(array);
                 
             }
             coin.close();
             stmt.close();
             rs.close();
            
        } catch (SQLException ex) {
            System.getLogger(Home.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }  
    }
   public void salvarProduto(){
        try {
            if(!RegexValidarProduto.ValidarProduto(produto.getText())){
                JOptionPane.showMessageDialog(null,"Produto errado!\nDigite apenas letras e comece com maiúscula ");
            }else if(!RegexValidarProduto.ValidarEstoque(estoque.getText())){
                JOptionPane.showMessageDialog(null,"Estoque errado!\nDigite números com no máximo 5 digitos");
            }else if(!RegexValidarProduto.ValidarPreco(preco.getText())){
                JOptionPane.showMessageDialog(null,"Preço errado!\nDigite  4 numeros à direita e 2 depois da vírgula ");
            }else if(!RegexValidarProduto.ValidarDescricao(descricao.getText())){
               JOptionPane.showMessageDialog(null,"Descrição errada!\nDigite apenas letras e comece com maiúscula "); 
            }else if(!RegexValidarProduto.ValidarCor(cor.getText())){
                JOptionPane.showMessageDialog(null,"cor errada!\nDigite apenas letras e comece com maiúscula ");
            }else if(!RegexValidarProduto.ValidarTecido(tecido.getText())){
                JOptionPane.showMessageDialog(null,"tecido errado!\nDigite apenas letras e comece com maiúscula ");
            }else if(!RegexValidarProduto.ValidarTipoProduto(this.categoria.getText())){
                JOptionPane.showMessageDialog(null,"Categoria/tipo de produto errado!\nDigite apenas letras e comece com maiúscula ");
            }else if(!RegexValidarProduto.ValidarURL(url.getText())){
                JOptionPane.showMessageDialog(null,"Url errado!\nDigite[http://xxxxxx.com/xxxxxxx/xxxxxx.png ou jpg ou jpeg ou gif ou bmp ou webp ou svg]");
            }else{
                
            Connection coin = conexaoBancoDeDados.conexaoBanco();
            String sql ="INSERT INTO descricao(descricao,cor,tecido,tamanho,categoria,imagem_url)VALUES(?,?,?,?,?,?)";
            PreparedStatement stmt = coin.prepareStatement(sql);
            stmt.setString(1, this.descricao.getText());
            stmt.setString(2, this.cor.getText());
            stmt.setString(3, this.tecido.getText());
            stmt.setString(4, this.tamanhoProduto);
            stmt.setString(5, this.categoria.getText());
            stmt.setString(6,this.url.getText());
            stmt.execute();
            sql = "INSERT INTO produto(denominacao,quantidade_estoque,preco,id_descricao)VALUES(?,?,?,(SELECT id_descricao FROM descricao ORDER BY id_descricao DESC LIMIT 1));";
            stmt = coin.prepareStatement(sql);
            stmt.setString(1, this.produto.getText());
            stmt.setString(2, this.estoque.getText());
            stmt.setString(3, this.preco.getText());
            stmt.execute();
            stmt.close();
            coin.close();
            atualizarTabelaEstoque();
            limparProdutos();
            
            }
             
        } catch (SQLException ex) {
            Logger.getLogger(CadastroProduto.class.getName()).log(Level.SEVERE, null, ex);
        }
    
        
        
       
   }
   
public void editarProduto(){
        try {
           if(!RegexValidarProduto.ValidarProduto(produto.getText())){
                JOptionPane.showMessageDialog(null,"Produto errado!\nDigite apenas letras e comece com maiúscula ");
            }else if(!RegexValidarProduto.ValidarEstoque(estoque.getText())){
                JOptionPane.showMessageDialog(null,"Estoque errado!\nDigite números com no máximo 5 digitos");
            }else if(!RegexValidarProduto.ValidarPreco(preco.getText())){
                JOptionPane.showMessageDialog(null,"Preço errado!\nDigite  4 numeros à direita e 2 depois da vírgula ");
            }else if(!RegexValidarProduto.ValidarDescricao(descricao.getText())){
               JOptionPane.showMessageDialog(null,"Descrição errada!\nDigite apenas letras e comece com maiúscula "); 
            }else if(!RegexValidarProduto.ValidarCor(cor.getText())){
                JOptionPane.showMessageDialog(null,"cor errada!\nDigite apenas letras e comece com maiúscula ");
            }else if(!RegexValidarProduto.ValidarTecido(tecido.getText())){
                JOptionPane.showMessageDialog(null,"tecido errado!\nDigite apenas letras e comece com maiúscula ");
            }else if(!RegexValidarProduto.ValidarTipoProduto(this.categoria.getText())){
                JOptionPane.showMessageDialog(null,"Categoria/tipo de produto errado!\nDigite apenas letras e comece com maiúscula ");
            }else if(!RegexValidarProduto.ValidarURL(url.getText())){
                JOptionPane.showMessageDialog(null,"Url errado!\nDigite[http://xxxxxx.com/xxxxxxx/xxxxxx.png ou jpg ou jpeg ou gif ou bmp ou webp ou svg]");
            }else{
         Connection coin = conexaoBancoDeDados.conexaoBanco();
         String sql = "UPDATE descricao SET descricao = ?,cor=?,tecido=?,tamanho=?,categoria=?,imagem_url=? WHERE id_descricao=?;";
         PreparedStatement stmt = coin.prepareStatement(sql);
         stmt.setString(1, this.descricao.getText());
         stmt.setString(2, this.cor.getText());
         stmt.setString(3, this.tecido.getText());
         stmt.setString(4, this.tamanhoProduto);
         stmt.setString(5, this.categoria.getText());
         stmt.setString(6,this.url.getText());
         stmt.setString(7, this.codigo.getText());
         stmt.executeUpdate();
         sql = "UPDATE produto SET denominacao = ?,quantidade_estoque=?, preco = ?,situacao = ?  WHERE id_descricao=?;";
         stmt= coin.prepareStatement(sql);
         stmt.setString(1, this.produto.getText());
         stmt.setString(2, this.estoque.getText());
         stmt.setString(3, this.preco.getText());
         stmt.setString(4, this.situacaoEstoque);
         stmt.setString(5, this.codigo.getText());
         stmt.executeUpdate();
         stmt.close();
         coin.close();
         JOptionPane.showMessageDialog(null, "Produto alterado com sucesso");
         cf.limparCampos();   
                
         }   
       } catch (SQLException ex) {
           System.getLogger(CadastroFuncionário.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
       }
       
       
   }
 int resposta = JOptionPane.showConfirmDialog(null,
        "Tem certeza que deseja excluir este produto?\nEssa ação também removerá os dados importantes e sensivéis.",
       "Confirmar Exclusão",
      JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
        
        if(resposta== JOptionPane.YES_NO_OPTION){
             try {
           Connection coin = conexaoBancoDeDados.conexaoBanco();
           
          String    sql="DELETE FROM historico_preco WHERE id_produto = ?";
          PreparedStatement  stmt = coin.prepareStatement(sql);
          stmt.setString(1, this.codigo.getText());
          stmt.execute();
          sql = "DELETE FROM produto WHERE id_produto=?;";
          stmt = coin.prepareStatement(sql);
          stmt.setString(1, this.codigo.getText());
          stmt.execute();
          sql = "DELETE FROM produtos_deletados WHERE id_produto = ?;";
           stmt = coin.prepareStatement(sql);
           stmt.setString(1, this.codigo.getText());
          stmt.execute();
           sql = "DELETE FROM descricao WHERE id_descricao = ?;";
           stmt = coin.prepareStatement(sql);
           stmt.setString(1, this.codigo.getText());
        
          
               stmt.execute();
               
              
               
               JOptionPane.showMessageDialog(null, "Produto Deletado");
               stmt.close();
               coin.close();
               atualizarTabelaEstoque();
              
               
               
          
       } catch (SQLException ex) {
           System.getLogger(CadastroFuncionário.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
       }
            
        }